{
  "name": "promise-aggregator",
  "version": "1.0.0",
  "description": "Aggregates multiple function calls (promises or not), making sure the (expensive) function call (e.g. network) gets throttled. It's basically debounce with promises. Extra options make input aggregation and timing parameters configurable",
  "main": "promise-aggregator.js",
  "scripts": {
    "test-watch": "mocha tests/index --watch",
    "test": "mocha tests/index"
  },
  "keywords": [
    "promise",
    "throttle",
    "debounce",
    "async",
    "aggregate",
    "aggregator"
  ],
  "author": "fresidue",
  "license": "MIT",
  "dependencies": {
    "delay": "^3.0.0"
  },
  "devDependencies": {
    "lodash": "^4.17.10",
    "mocha": "^5.2.0",
    "time-span": "^2.0.0"
  }
}
